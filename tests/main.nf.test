nextflow_pipeline {

    name "Test nucleovar"
    script "../main.nf"
    tag "pipeline"
    tag "pipeline_nucleovar"


    test("stub test") {
        options "-stub"
        when {
            params {
                outdir                       = "results"
                max_cpus                     = 2
                max_memory                   = '6.GB'
                max_time                     = '6.h'
                input                        = "/home/naidur/snvs_indels/nucleovar/tests/resources/stub/stub_pipeline_input.csv"
                rules_json                   = "https://github.com/mskcc-omics-workflows/nucleovar/tree/feature/call_variants/tests/resources/stub/stub_rules.json"
                aux_bams                     = "https://raw.githubusercontent.com/mskcc-omics-workflows/nucleovar/feature/call_variants/tests/resources/stub/stub_aux_bams.csv"
                fasta                        = "https://github.com/nf-core/test-datasets/blob/modules/data/genomics/sarscov2/genome/genome.fasta"
                fai                          = "https://github.com/nf-core/test-datasets/blob/modules/data/genomics/sarscov2/genome/genome.fasta.fai"
                canonical_bed                = "https://github.com/nf-core/test-datasets/modules/data/genomics/sarscov2/genome/bed/test.bed"
                target_bed                   = "https://github.com/nf-core/test-datasets/modules/data/genomics/sarscov2/genome/bed/test2.bed"
                dict                         = "https://github.com/nf-core/test-datasets/modules/data/genomics/sarscov2/genome/genome.dict"
            }
        }

        then {
            assertAll(
                { assert workflow.success }
            )
        }
    }
}
